import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import {setEmail,setPassword,fetchRegistration,fetchAuthorization,} from "../../redux/slices/authSlice";
import "./Auth.css";
import google_img from "./images-login/G+.svg";
import { fetchProfileByUserId } from "../../redux/slices/profileSlice";

const Auth = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { email, password, error, isAuthenticated } = useSelector((state) => state.auth);
  const [isRegistering, setIsRegistering] = useState(true);
  const [confirmPassword, setConfirmPassword] = useState("");
  const [rememberMe, setRememberMe] = useState(false);
  const { profileData } = useSelector((state) => state.profile);
  const [isProfileLoading, setIsProfileLoading] = useState(true);
  const [showPassword, setShowPassword] = useState(false); // –ì–ª–∞–∑–æ–∫ –¥–ª—è –ø–∞—Ä–æ–ª—è
  const [showConfirmPassword, setShowConfirmPassword] = useState(false); // –ì–ª–∞–∑–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è



  const userId = useSelector((state) => state.auth.userId);

  useEffect(() => {
    if (userId) {
      setIsProfileLoading(true);
      dispatch(fetchProfileByUserId(userId))
        .unwrap()
        .finally(() => setIsProfileLoading(false));
    }
  }, [dispatch, userId]);

  useEffect(() => {
    const storedEmail = localStorage.getItem("email");
    const storedPassword = localStorage.getItem("password");
    if (storedEmail && storedPassword) {
      dispatch(setEmail(storedEmail));
      dispatch(setPassword(storedPassword));
      setIsRegistering(false);
    }
  }, [dispatch]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (isRegistering) {
      if (password !== confirmPassword) {
        alert("–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å");
        return;
      }

      dispatch(fetchRegistration({ email, password }))
        .unwrap()
        .then(() => navigate("/home"))
        .catch((err) => console.error(err));
    } else {
      dispatch(fetchAuthorization({ email, password, rememberMe }))
        .unwrap()
        .then(() => {
          if (!isProfileLoading) {
            if (!profileData || Object.keys(profileData).length === 0) {
              navigate("/registration");
            } else {
              navigate("/home");
            }
          }
        })
        .catch((err) => console.error(err));
    }
  };

  useEffect(() => {
    if (isAuthenticated) {
      localStorage.setItem("email", email);
      localStorage.setItem("password", password);
    }
  }, [isAuthenticated, email, password]);

  return (
    <div className="auth-container">
      <form onSubmit={handleSubmit} className="auth-form">
        <h2>{isRegistering ? "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è" : "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è"}</h2>
        <input
         className='input-defolt input-emeil'
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => dispatch(setEmail(e.target.value))}
          required
        />

        <div className="container-pasword">
        <input
           className="input-reset__pasword"
           type={showPassword ? 'text' : 'password'} // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é
           placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
           value={password}
           onChange={(e) => dispatch(setPassword(e.target.value))}
           required
        />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="password-toggle-btn"
            >
              {showPassword ? 'üôà' : 'üëÅÔ∏è'}
            </button>

        </div>

        {isRegistering && (
          <div className="container-pasword">
          <input
           className="input-reset__pasword"
           type={showConfirmPassword ? 'text' : 'password'} // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é
           placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
           value={confirmPassword}
           onChange={(e) => setConfirmPassword(e.target.value)}
           required
          />
           <button
              type="button"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="password-toggle-btn"
            >
              {showConfirmPassword ? 'üôà' : 'üëÅÔ∏è'}
            </button>
          </div>
        )}
        {!isRegistering && (
          <label className='remember-label'>
            Remember me
            <input
              type="checkbox"
              checked={rememberMe}
              onChange={(e) => setRememberMe(e.target.checked)}
            />
          </label>
        )}
        
        
              {/* –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ */}
              {error && <p className="error">{error}</p>}

        <button  className='submit-button' type="submit">{isRegistering ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–í–æ–π—Ç–∏"}</button>
        {!isRegistering && (
          <button
          className='gogle-button'
            type="button"
            onClick={() =>
              (window.location.href =
                "https://final-project-link.onrender.com/oauth2/authorization/google")
            }
          >
            –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google <img src={google_img} alt="Google Login" />
          </button>
          
        )}
         <hr className='auth-line'></hr>
        <p onClick={() => setIsRegistering(!isRegistering)} className='toggle'>
          {isRegistering ? "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏" : "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
        </p>
        {!isRegistering && (
          <p  className='highlight '>
            <a href="/forgot-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
          </p>
        )}
      </form>
    </div>
  );
};

export default Auth;